// Prisma schema for CompeetCode

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  email       String   @unique
  password    String   // hashed with bcrypt
  
  // ELO Rating System
  rating      Int      @default(1200)  // Starting ELO rating
  wins        Int      @default(0)
  losses      Int      @default(0)
  draws       Int      @default(0)
  totalMatches Int     @default(0)
  
  // Profile
  name        String?
  avatar      String?
  isActive    Boolean  @default(true)
  lastActive  DateTime @default(now())
  
  // Relationships
  matches     Match[]  @relation("UserMatches")
  submissions Submission[]
  ratingHistory RatingHistory[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Match {
  id            String      @id @default(uuid())
  type          MatchType   // RANKED, CASUAL, PRIVATE
  status        MatchStatus // WAITING, IN_PROGRESS, COMPLETED, CANCELLED
  
  // Problem & Settings
  problemId     String
  maxPlayers    Int         @default(2)
  timeLimit     Int?        // in minutes, null = problem default
  
  // Private Match Support
  inviteCode    String?     @unique // 6-digit code for private matches
  
  // Match Results
  winner        String?     // userId of winner, null for draws
  startedAt     DateTime?   // when match actually began
  completedAt   DateTime?   // when match ended
  
  // Relationships
  users         User[]      @relation("UserMatches")
  submissions   Submission[]
  problem       Problem     @relation(fields: [problemId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Submission {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  match         Match    @relation(fields: [matchId], references: [id])
  matchId       String
  
  // Submission Details
  code          String   // The submitted code
  language      String   // Programming language (js, python, cpp, etc.)
  verdict       Verdict  // ACCEPTED, WRONG_ANSWER, TIME_LIMIT_EXCEEDED, etc.
  executionTime Int?     // in milliseconds
  memoryUsed    Int?     // in KB
  testsPassed   Int      @default(0) // Number of test cases passed
  totalTests    Int      @default(0) // Total test cases
  
  createdAt     DateTime @default(now())
}

model Problem {
  id           String       @id @default(uuid())
  title        String
  description  String       // Markdown format
  difficulty   Difficulty   // EASY, MEDIUM, HARD
  timeLimit    Int          @default(30) // minutes
  memoryLimit  Int          @default(256) // MB
  
  // Problem Metadata
  tags         String[]     // ["array", "dynamic-programming"]
  category     String       @default("algorithms") // algorithms, data-structures
  constraints  String?      // Input constraints description
  
  // Usage Statistics
  totalAttempts Int         @default(0)
  totalSolved   Int         @default(0)
  isActive      Boolean     @default(true)
  
  // Relationships
  matches       Match[]
  examples      Example[]   // Sample inputs/outputs shown to users
  testCases     TestCase[]  // Hidden test cases for judging
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Example {
  id          String  @id @default(uuid())
  problemId   String
  input       String  // JSON string representation
  output      String  // Expected output as string
  explanation String? // Optional explanation for the example
  
  problem     Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model TestCase {
  id        String  @id @default(uuid())
  problemId String
  input     String  // JSON string representation
  output    String  // Expected output as string
  isHidden  Boolean @default(true) // Hidden from users
  weight    Int     @default(1)    // For partial scoring
  
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model RatingHistory {
  id        String   @id @default(uuid())
  userId    String
  matchId   String
  oldRating Int
  newRating Int
  change    Int      // positive for gain, negative for loss
  matchType MatchType // Only RANKED matches affect rating
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
}

// Enums
enum MatchType {
  RANKED
  CASUAL
  PRIVATE
}

enum MatchStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Verdict {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
  INTERNAL_ERROR
}
