// Temporary schema file to generate client in backend
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Copy of main schema - just for client generation
model User {
  id            String          @id @default(uuid())
  username      String          @unique
  email         String          @unique
  password      String
  rating        Int             @default(1200)
  wins          Int             @default(0)
  losses        Int             @default(0)
  draws         Int             @default(0)
  totalMatches  Int             @default(0)
  name          String?
  avatar        String?
  isActive      Boolean         @default(true)
  lastActive    DateTime        @default(now())
  matches       Match[]         @relation("UserMatches")
  submissions   Submission[]
  ratingHistory RatingHistory[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Match {
  id          String       @id @default(uuid())
  type        MatchType
  status      MatchStatus
  problemId   String
  maxPlayers  Int          @default(2)
  timeLimit   Int?
  inviteCode  String?      @unique
  winner      String?
  startedAt   DateTime?
  completedAt DateTime?
  users       User[]       @relation("UserMatches")
  submissions Submission[]
  problem     Problem      @relation(fields: [problemId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Submission {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  match         Match    @relation(fields: [matchId], references: [id])
  matchId       String
  code          String
  language      String
  verdict       Verdict
  executionTime Int?
  memoryUsed    Int?
  testsPassed   Int      @default(0)
  totalTests    Int      @default(0)
  createdAt     DateTime @default(now())
}

model Problem {
  id            String     @id @default(uuid())
  title         String
  description   String
  difficulty    Difficulty
  timeLimit     Int        @default(30)
  memoryLimit   Int        @default(256)
  tags          String[]
  category      String     @default("algorithms")
  constraints   String?
  totalAttempts Int        @default(0)
  totalSolved   Int        @default(0)
  isActive      Boolean    @default(true)
  matches       Match[]
  examples      Example[]
  testCases     TestCase[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Example {
  id          String  @id @default(uuid())
  problemId   String
  input       String
  output      String
  explanation String?
  problem     Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model TestCase {
  id        String  @id @default(uuid())
  problemId String
  input     String
  output    String
  isHidden  Boolean @default(true)
  weight    Int     @default(1)
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model RatingHistory {
  id        String    @id @default(uuid())
  userId    String
  matchId   String
  oldRating Int
  newRating Int
  change    Int
  matchType MatchType
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
}

enum MatchType {
  RANKED
  CASUAL
  PRIVATE
}

enum MatchStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Verdict {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
  INTERNAL_ERROR
}
